using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.AspNetCore.Identity;
using Newtonsoft.Json.Linq;

namespace {{ name_space }}
{
    public class ApplicationDbContext : DbContext
    {
        {{~ for class in classes ~}}
        {{~ if !class.is_pivot ~}}
        public DbSet<{{ class.name }}> {{ class.name.plural }} { get; set; }
        {{~ end ~}}
        {{~ end ~}}
        
        public ApplicationDbContext(DbContextOptions<ApplicationDbContext> options)
            : base(options)
        {
        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            {{~ for class in classes ~}}
            {{~ if class.is_pivot ~}}
            modelBuilder.Entity<{{ (first_reference class).class.name }}>()
            .HasMany(p => p.{{ (second_reference class).class.name.plural }})
            .WithMany(p => p.{{ (first_reference class).class.name.plural }})
            .UsingEntity(j =>
                {
                    {{~ for item in seedList ~}}
                    {{~ if item.is_pivot && item.name == class.name ~}}
                    j.HasData(new {
                        {{~ for kvp in item.values ~}}
                        {{ kvp.key }} = {{ kvp.value }}{{ if !for.last}},{{ end }}
                        {{~ end ~}}
                    });
                    {{~ end ~}}
                    {{~ end ~}}
                }
            );
            {{~ else ~}}
            {{~ for property in class.properties ~}}
            {{~ if property.class && !property.is_collection ~}}
            modelBuilder.Entity<{{ class.name }}>()
                .HasOne(p => p.{{ property.name }})
                .WithMany({{ if property.mirror_property }}p => p.{{ property.mirror_property.name }}{{ end }})
                .HasForeignKey(p => p.{{ property.name }}Id);

            {{~ end ~}}
            {{~ end ~}}
            {{~ end ~}}
            {{~ end ~}}
            var passwordHasher = new PasswordHasher<User>();
            {{~ idx = 1 ~}}
            {{~ for item in seedList ~}}
            {{~ if item.name == "User"~}}
            var user{{idx}} = new User {
                {{~ for kvp in item.values ~}}
                {{~ if kvp.key != "PasswordHash" ~}}
                {{ kvp.key }} = {{ kvp.value }}{{ if !for.last}},{{ end }}
                {{~ end ~}}
                {{~ end ~}}
            };
            user{{idx}}.PasswordHash = passwordHasher.HashPassword(user{{idx}}, "password123");
            modelBuilder.Entity<User>().HasData(user{{idx}});
            {{~ idx = idx + 1 ~}}
            {{~ else if !item.is_pivot ~}}
            modelBuilder.Entity<{{item.name}}>().HasData(new {{item.name}} {
                {{~ for kvp in item.values ~}}
                {{ kvp.key }} = {{ kvp.value }}{{ if !for.last}},{{ end }}
                {{~ end ~}}
            });
            {{~ end ~}}
            {{~ end ~}}
        }
    }
}