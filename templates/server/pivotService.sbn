/* 
 * Generated by BootGen https://github.com/BootGen/BootGenVue
 */

using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Mvc;
using Microsoft.Extensions.Logging;
using Microsoft.EntityFrameworkCore;
using Microsoft.AspNetCore.Authorization;

namespace {{ name_space }}.Services
{
    {{~
    class_a = (first_reference class).class
    name_a = (first_reference class).noun
    class_b = (second_reference class).class
    name_b = (second_reference class).noun
    ~}}
    public class {{ class.name.plural }}Service : I{{ class.name.plural }}Service
    {
        {{~ if class_a.id != class_b.id ~}}
        public ServiceResponse<List<{{ class_a.name }}>> Get{{ name_a.plural }}Of{{ name_b }}(int {{ camel_case name_b }}Id)
        {
            using (var db = new DataContext())
            {
                var parent = db.{{ class_b.name.plural }}.Where(item => item.Id == {{ camel_case name_b }}Id).FirstOrDefault();
                if (parent == null)
                    return new ServiceResponse<List<{{ class_a.name }}>>
                    {
                        StatusCode = 400
                    };
                var result = db.{{ class.name.plural }}
                                .Include("{{ name_a }}")
                                .Where(item => item.{{ class_b.name }}Id == parent.Id)
                                .Select(item => item.{{ class_a.name }})
                                .ToList();
                return new ServiceResponse<List<{{ class_a.name }}>>
                {
                    StatusCode = 200,
                    ResponseData = result
                };
            }
        }
        {{~ end ~}}

        public ServiceResponse<List<{{ class_b.name }}>> Get{{ name_b.plural }}Of{{ name_a }}(int {{ camel_case name_a }}Id)
        {
            using (var db = new DataContext())
            {
                var parent = db.{{ class_a.name.plural }}.Where(item => item.Id == {{ camel_case name_a }}Id).FirstOrDefault();
                if (parent == null)
                    return new ServiceResponse<List<{{ class_b.name }}>>
                    {
                        StatusCode = 400
                    };
                var result = db.{{ class.name.plural }}
                               .Include("{{ name_b }}")
                               .Where(item => item.{{ name_a }}Id == parent.Id)
                               .Select(item => item.{{ name_b }})
                               .ToList();
                {{~ if class_a.id == class_b.id ~}}
                result.AddRange(db.{{ class.name.plural }}
                                  .Include("{{ name_a }}")
                                  .Where(item => item.{{ name_b }}Id == parent.Id)
                                  .Select(item => item.{{ name_a }}));
                {{~ end ~}}
                return new ServiceResponse<List<{{ class_b.name }}>>
                {
                    StatusCode = 200,
                    ResponseData = result
                };
            }
        }

        public ServiceResponse Assign(int {{ camel_case name_a }}Id, int {{ camel_case name_b }}Id)
        {
            try
            {
                using (var db = new DataContext())
                {
                    db.{{ class.name.plural }}.Add(new {{ class.name }}{ {{ name_a }}Id = {{ camel_case name_a }}Id, {{ name_b }}Id = {{ camel_case name_b }}Id });
                    db.SaveChanges();
                    return new ServiceResponse
                    {
                        StatusCode = 200,
                    };
                }
            } catch (DbUpdateException)
            {
                return new ServiceResponse
                {
                    StatusCode = 400
                };
            }
        }

        public ServiceResponse Remove(int {{ camel_case name_a }}Id, int {{ camel_case name_b }}Id)
        {
            try
            {
                using (var db = new DataContext())
                {
                    var toRemove = db.{{ class.name.plural }}
                                    {{~ if class_a.id == class_b.id ~}}
                                    .Where(item => item.{{ name_a }}Id == {{ camel_case name_a }}Id && item.{{ name_b }}Id == {{ camel_case name_b }}Id || item.{{ name_a }}Id == {{ camel_case name_b }}Id && item.{{ name_b }}Id == {{ camel_case name_a }}Id);
                                    {{~ else ~}}
                                    .Where(item => item.{{ name_a }}Id == {{ camel_case name_a }}Id && item.{{ name_b }}Id == {{ camel_case name_b }}Id);
                                    {{~ end ~}}
                    db.{{ class.name.plural }}.RemoveRange(toRemove);
                    db.SaveChanges();
                }
            } catch (DbUpdateException)
            {
                return new ServiceResponse
                {
                    StatusCode = 400
                };
            }
            return new ServiceResponse
            {
                StatusCode = 200
            };
        }
    }
}
