using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Mvc;
using Microsoft.Extensions.Logging;
using Microsoft.EntityFrameworkCore;
using Microsoft.AspNetCore.Authorization;

namespace {{ name_space }}.Services
{
    {{~
    class_a = (first_reference class).class
    name_a = (first_reference class).noun
    class_b = (second_reference class).class
    name_b = (second_reference class).noun
    ~}}
    public class {{ class.name.plural }}Service : I{{ class.name.plural }}Service
    {
        private readonly ApplicationDbContext dbContext;

        public {{ class.name.plural }}Service(ApplicationDbContext dbContext)
        {
            this.dbContext = dbContext;
        }

        {{~ if class_a.id != class_b.id ~}}
        public List<{{ class_a.name }}> Get{{ name_a.plural }}Of{{ name_b }}(int {{ camel_case name_b }}Id)
        {
            var parent = dbContext.{{ class_b.name.plural }}.Where(item => item.Id == {{ camel_case name_b }}Id).FirstOrDefault();
            if (parent == null)
                return new List<{{ class_a.name }}>();
                return dbContext.{{ class.name.plural }}
                                .Include("{{ name_a }}")
                                .Where(item => item.{{ class_b.name }}Id == parent.Id)
                                .Select(item => item.{{ class_a.name }})
                                .ToList();
        }
        {{~ end ~}}

        public List<{{ class_b.name }}> Get{{ name_b.plural }}Of{{ name_a }}(int {{ camel_case name_a }}Id)
        {
            var parent = dbContext.{{ class_a.name.plural }}.Where(item => item.Id == {{ camel_case name_a }}Id).FirstOrDefault();
            if (parent == null)
                return new List<{{ class_b.name }}>();
            return dbContext.{{ class.name.plural }}
                            .Include("{{ name_b }}")
                            .Where(item => item.{{ name_a }}Id == parent.Id)
                            .Select(item => item.{{ name_b }})
                            .ToList();
        }

        public bool Assign(int {{ camel_case name_a }}Id, int {{ camel_case name_b }}Id)
        {
            try
            {
                dbContext.{{ class.name.plural }}.Add(new {{ class.name }}{ {{ name_a }}Id = {{ camel_case name_a }}Id, {{ name_b }}Id = {{ camel_case name_b }}Id });
                dbContext.SaveChanges();
                return true;
            } catch (DbUpdateException)
            {
                return false;
            }
        }

        public bool Remove(int {{ camel_case name_a }}Id, int {{ camel_case name_b }}Id)
        {
            try
            {
                var toRemove = dbContext.{{ class.name.plural }}
                                {{~ if class_a.id == class_b.id ~}}
                                .Where(item => item.{{ name_a }}Id == {{ camel_case name_a }}Id && item.{{ name_b }}Id == {{ camel_case name_b }}Id || item.{{ name_a }}Id == {{ camel_case name_b }}Id && item.{{ name_b }}Id == {{ camel_case name_a }}Id);
                                {{~ else ~}}
                                .Where(item => item.{{ name_a }}Id == {{ camel_case name_a }}Id && item.{{ name_b }}Id == {{ camel_case name_b }}Id);
                                {{~ end ~}}
                dbContext.{{ class.name.plural }}.RemoveRange(toRemove);
                dbContext.SaveChanges();
                return true;
            } catch (DbUpdateException)
            {
                return false;
            }
        }
    }
}
