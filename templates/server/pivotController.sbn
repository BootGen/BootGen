using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Mvc;
using Microsoft.Extensions.Logging;
using Microsoft.EntityFrameworkCore;
using Microsoft.AspNetCore.Authorization;
using {{ name_space }}.Services;

namespace {{ name_space }}.Controllers
{
    [ApiController]
    [Route("{{ resource.route.path }}")]
    {{~ if resource.authenticate ~}}
    [Authorize]
    {{~ end ~}}
    public class {{ controller_name resource }} : ControllerBase
    {
        private I{{ resource.pivot.name.plural }}Service pivotService;
        private I{{ service_name resource }} dataService;
        public {{ controller_name resource }}(I{{ service_name resource }} dataService, I{{ resource.pivot.name.plural }}Service pivotService)
        {
            this.dataService = dataService;
            this.pivotService = pivotService;
        }

        {{~
        parent = resource.parent_resource
        ~}}

        [HttpGet]
        public IActionResult Get{{ resource.name.plural }}([FromRoute] int {{ camel_case parent.class.name }}Id)
        {
            return Ok(pivotService.Get{{ resource.name.plural }}Of{{ parent.class.name }}({{ camel_case parent.class.name }}Id));
        }
        {{~ if !resource.is_readonly ~}}

        [HttpPost]
        public IActionResult Add{{ resource.name }}([FromRoute] int {{ camel_case parent.class.name }}Id, [FromBody] {{ resource.class.name }} {{ camel_case resource.name }})
        {
            if (pivotService.Assign({{ camel_case parent.class.name }}Id: {{ camel_case parent.class.name }}Id, {{ camel_case resource.name }}Id: {{ camel_case resource.name }}.Id))
                return Ok(dataService.Get{{ resource.class.name }}({{ camel_case resource.name }}.Id));
            return BadRequest();
        }

        {{~
        path_parameter = "{" + (camel_case resource.name) + "Id}"
        ~}}
        [HttpDelete]
        [Route("{{path_parameter}}")]
        public IActionResult Remove{{ resource.name }}([FromRoute] int {{ camel_case parent.class.name }}Id, [FromRoute] int {{ camel_case resource.name }}Id)
        {
            if (pivotService.Remove({{ camel_case parent.class.name }}Id: {{ camel_case parent.class.name }}Id, {{ camel_case resource.name }}Id: {{ camel_case resource.name }}Id))
                return Ok();
            return BadRequest();
        }
        {{~ end ~}}
    }
}
