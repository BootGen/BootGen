/* 
 * Generated by BootGen https://github.com/BootGen/BootGenVue
 */

using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Mvc;
using Microsoft.Extensions.Logging;
using Microsoft.EntityFrameworkCore;
using Microsoft.AspNetCore.Authorization;
using Microsoft.EntityFrameworkCore.ChangeTracking;

namespace {{ name_space }}.Services
{
    public class {{ service_name resource }} : I{{ service_name resource }}
    {
        {{~ class = resource.class ~}}

        public ServiceResponse<List<{{ class.name }}>> Get{{ class.name.plural }}()
        {
            using (var db = new DataContext())
            {
                var query = db.{{ class.name.plural }}{{ for property in (get_properties_to_load class) }}
                                .Include("{{ property }}"){{ end }};
                return new ServiceResponse<List<{{ class.name }}>>
                {
                    StatusCode = 200,
                    ResponseData = query.ToList()
                };
            }
        }

        {{~ for property in class.properties ~}}
        {{~ if property.is_parent_reference ~}}
        public ServiceResponse<List<{{ class.name }}>> Get{{ class.name.plural }}Of{{ property.name }}(int {{ camel_case property.class.name }}Id)
        {
            using (var db = new DataContext())
            {
                {{~
                parent = resource.parent_resource
                ~}}
                var query = db.{{ class.name.plural }}{{ for prop in (get_properties_to_load class) }}
                                .Include("{{ prop }}"){{ end }}{{ if parent }}
                                .Where(item => item.{{ property.name }} == {{ camel_case property.class.name }}Id){{ end }};
                return new ServiceResponse<List<{{ class.name }}>>
                {
                    StatusCode = 200,
                    ResponseData = query.ToList()
                };
            }
        }

        {{~ end ~}}
        {{~ end ~}}
        public ServiceResponse<{{ class.name }}> Get{{ class.name }}(int {{ camel_case class.name }}Id)
        {
            using (var db = new DataContext())
            {
                var item = db.{{ class.name.plural }}
                             {{~ for property in (get_properties_to_load class) ~}}
                             .Include("{{ property }}")
                             {{~ end ~}}
                             .Where(item => item.Id == {{ camel_case class.name }}Id).FirstOrDefault();
                if (item == null)
                    return new ServiceResponse<{{ class.name }}>
                    {
                        StatusCode = 404
                    };
                return new ServiceResponse<{{ class.name }}>
                {
                    StatusCode = 200,
                    ResponseData = item
                };
            }
        }
        {{~ if !resource.is_readonly ~}}

        public ServiceResponse<{{ class.name }}> Add{{ class.name }}({{ class.name }} {{ camel_case class.name }})
        {
            {{~ if resource.has_timestamps ~}}
            {{ camel_case class.name }}.Created = DateTime.Now;
            {{ camel_case class.name }}.Updated = DateTime.Now;
            {{~ end ~}}
            {{~
            parent = resource.parent_resource
            ~}}
            {{~ if parent ~}}
            {{ camel_case class.name }}.{{ parent_id_name resource }} = {{ camel_case parent.class.name }}Id;
            {{~ end ~}}
            EntityEntry<{{ class.name }}> entityEntry;
            try
            {
                using (var db = new DataContext())
                {
                    entityEntry = db.{{ class.name.plural }}.Add({{ camel_case class.name }});
                    db.SaveChanges();
                }
            } catch (DbUpdateException)
            {
                return new ServiceResponse<{{ class.name }}>
                {
                    StatusCode = 400
                };
            }
            return new ServiceResponse<{{ class.name }}>
            {
                StatusCode = 200,
                ResponseData = entityEntry.Entity
            };
        }

        public ServiceResponse<{{ class.name }}> Update{{ class.name }}(int {{ camel_case class.name }}Id, {{ class.name }} {{ camel_case class.name }})
        {
            try
            {
                using (var db = new DataContext())
                {
                    var original = db.{{ class.name.plural }}
                                {{~ for property in (get_properties_to_load class) ~}}
                                .Include("{{ property }}")
                                {{~ end ~}}
                                .Where(item => item.Id == {{ camel_case class.name }}Id).FirstOrDefault();
                    EntityEntry<{{ class.name }}> entityEntry;
                    entityEntry = db.{{ class.name.plural }}.Update(original);
                    {{~ for property in class.common_properties ~}}
                    {{~ if !property.is_client_readonly ~}}
                    original.{{property.name}} = {{ camel_case class.name }}.{{property.name}};
                    {{~ end ~}}
                    {{~ end ~}}
                    {{~ if resource.has_timestamps ~}}
                    original.Updated = DateTime.Now;
                    {{~ end ~}}
                    db.SaveChanges();
                    return new ServiceResponse<{{ class.name }}>
                    {
                        StatusCode = 200,
                        ResponseData = entityEntry.Entity
                    };
                }
            } catch (DbUpdateException)
            {
                return new ServiceResponse<{{ class.name }}>
                {
                    StatusCode = 400
                };
            }
        }

        public ServiceResponse Delete{{ class.name }}(int {{ camel_case class.name }}Id)
        {
            try
            {
                using (var db = new DataContext())
                {
                    var item = db.{{ class.name.plural }}.Where(item => item.Id == {{ camel_case class.name }}Id).FirstOrDefault();
                    if (item == null)
                        return new ServiceResponse
                        {
                            StatusCode = 400
                        };
                    db.{{ class.name.plural }}.Remove(item);
                    db.SaveChanges();
                }
            } catch (DbUpdateException)
            {
                return new ServiceResponse
                {
                    StatusCode = 400
                };
            }
            return new ServiceResponse
            {
                StatusCode = 200
            };
        }
        {{~ end ~}}
    }
}
